{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defaultTooltip = exports.defaultCountryStyle = exports.sizeMap = exports.heightRatio = exports.defaultColor = exports.defaultSize = void 0;\nexports.defaultSize = \"xl\";\nexports.defaultColor = \"#dddddd\";\nexports.heightRatio = 3 / 4;\nexports.sizeMap = {\n  sm: 240,\n  md: 336,\n  lg: 480,\n  xl: 640,\n  xxl: 1200\n};\nconst defaultCountryStyle = (stroke, strokeOpacity) => context => {\n  const {\n    countryValue,\n    minValue,\n    maxValue,\n    color\n  } = context;\n  const calculatedValue = typeof countryValue === \"string\" ? minValue :\n  // TODO bug in TS-ESLint; report this\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n  countryValue;\n  let opacityLevel = calculatedValue !== undefined ? 0.2 + 0.6 * ((calculatedValue - minValue) / (maxValue - minValue)) : 0;\n  // If there's only one value, the calculation would be dividing by zero.\n  // We adjust it to the maximum value.\n  if (Number.isNaN(opacityLevel)) opacityLevel = 0.8;\n  const style = {\n    fill: color,\n    fillOpacity: opacityLevel,\n    stroke,\n    strokeWidth: 1,\n    strokeOpacity,\n    cursor: \"pointer\"\n  };\n  return style;\n};\nexports.defaultCountryStyle = defaultCountryStyle;\nconst defaultTooltip = context => {\n  const {\n    countryName,\n    countryValue,\n    prefix,\n    suffix\n  } = context;\n  return `${countryName} ${prefix} ${countryValue.toLocaleString()} ${suffix}`;\n};\nexports.defaultTooltip = defaultTooltip;","map":{"version":3,"names":["exports","defaultSize","defaultColor","heightRatio","sizeMap","sm","md","lg","xl","xxl","defaultCountryStyle","stroke","strokeOpacity","context","countryValue","minValue","maxValue","color","calculatedValue","opacityLevel","undefined","Number","isNaN","style","fill","fillOpacity","strokeWidth","cursor","defaultTooltip","countryName","prefix","suffix","toLocaleString"],"sources":["../src/constants.ts"],"sourcesContent":[null],"mappings":";;;;;;AAGaA,OAAA,CAAAC,WAAW,GAAG,IAAI;AAClBD,OAAA,CAAAE,YAAY,GAAG,SAAS;AACxBF,OAAA,CAAAG,WAAW,GAAG,CAAC,GAAG,CAAC;AACnBH,OAAA,CAAAI,OAAO,GAA+B;EACjDC,EAAE,EAAE,GAAG;EACPC,EAAE,EAAE,GAAG;EACPC,EAAE,EAAE,GAAG;EACPC,EAAE,EAAE,GAAG;EACPC,GAAG,EAAE;CACN;AAEM,MAAMC,mBAAmB,GAC9BA,CAACC,MAAc,EAAEC,aAAqB,KACVC,OAA0B,IAAmB;EACvE,MAAM;IAAEC,YAAY;IAAEC,QAAQ;IAAEC,QAAQ;IAAEC;EAAK,CAAE,GAAGJ,OAAO;EAE3D,MAAMK,eAAe,GACnB,OAAOJ,YAAY,KAAK,QAAQ,GAC5BC,QAAQ;EACR;EACA;EACCD,YAAmC;EAC1C,IAAIK,YAAY,GACdD,eAAe,KAAKE,SAAS,GACzB,GAAG,GAAG,GAAG,IAAI,CAACF,eAAe,GAAGH,QAAQ,KAAKC,QAAQ,GAAGD,QAAQ,CAAC,CAAC,GAClE,CAAC;EAEP;EACA;EACA,IAAIM,MAAM,CAACC,KAAK,CAACH,YAAY,CAAC,EAAEA,YAAY,GAAG,GAAG;EAElD,MAAMI,KAAK,GAAG;IACZC,IAAI,EAAEP,KAAK;IACXQ,WAAW,EAAEN,YAAY;IACzBR,MAAM;IACNe,WAAW,EAAE,CAAC;IACdd,aAAa;IACbe,MAAM,EAAE;GACT;EACD,OAAOJ,KAAK;AACd,CAAC;AA7BUvB,OAAA,CAAAU,mBAAmB,GAAAA,mBAAA;AA+BzB,MAAMkB,cAAc,GACzBf,OAA0B,IAChB;EACV,MAAM;IAAEgB,WAAW;IAAEf,YAAY;IAAEgB,MAAM;IAAEC;EAAM,CAAE,GAAGlB,OAAO;EAC7D,OAAO,GAAGgB,WAAW,IAAIC,MAAM,IAAIhB,YAAa,CAACkB,cAAc,EAAE,IAAID,MAAM,EAAE;AAC/E,CAAC;AALY/B,OAAA,CAAA4B,cAAc,GAAAA,cAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}